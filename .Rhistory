t[i+1] <- t[i] + eventTime
N[i+1] <- N[i] + 1
}
else {
N[i+1] <- N[i] - 1
} }
else {
StochasticSim <- function(steps,b,d,N0){
N <- numeric(steps + 1);
t <- numeric(steps + 1);
N[1] <- N0;
t[1] <- 0;
for(i in 1:steps){
if (N[i]>0) {
eventTime <- rexp(1,(b+d)*N[i])
t[i+1] <- t[i] + eventTime
if (runif(1) < (b/(b+d))) {
N[i+1] <- N[i] + 1
} else {
N[i+1] <- N[i] - 1
}
}
else {
t[i+1] <- t[i]
}
plot(N~t,type="l")
return(N[steps+1])
}
}
StochasticSim <- function(steps,b,d,N0){
#
#
#
N <- numeric(steps + 1);
t <- numeric(steps + 1);
# Assign N0 (the initial population size) to the first element of N N[1] <- N0;
# Assign time = 0 to the initial element of t
t[1] <- 0;
# for each step, update N and t
for(i in 1:steps){
# check that the population is not extinct
if (N[i]>0) {
# The time to the next event is drawn from an exponential
# distribution in which the rate is the product of the population
# size and the sum of the per capita birth and death rates.
eventTime <- rexp(1,(b+d)*N[i])
# The new value of t is the old value plus
# the time to the next event.
t[i+1] <- t[i] + eventTime
Create vectors to hold population size and time
The length is = steps + 1 to hold the initial value
and all the updates
#
#
#
if (runif(1) < (b/(b+d))) {
The probability that the next event is a birth is b/(b+d) Draw a random number between 0 and 1 and see if it is
less than b/(b+d)
# If the event is a birth, population size increases by 1
N[i+1] <- N[i] + 1
} else {
# Otherwise, the event is a death, and population size # decreases by 1
N[i+1] <- N[i] - 1
} }
else {
# if the population is extinct, N is 0 and time is unchanged N[i+1] <- 0
t[i+1] <- t[i]
} }
# Plot N versus t
plot(N~t,type="l")
# Output the final population size
return(N[steps+1])
}
StochasticSim <- function(steps,b,d,N0){
N <- numeric(steps + 1);
t <- numeric(steps + 1);
N[1] <- N0;
t[1] <- 0;
for(i in 1:steps){
if (N[i]>0) {
eventTime <- rexp(1,(b+d)*N[i])
t[i+1] <- t[i] + evenTime
if (runif(1) < (b/(b+d))) {
N[i+1] <- N[i] + 1
} else {
N[i+1] <- N[i] - 1
}
}
else {
N[i+1] <- 0
t[i+1] <- t[i]
}
}
StochasticSim <- function(steps,b,d,N0){
N <- numeric(steps + 1);
t <- numeric(steps + 1);
N[1] <- N0;
t[1] <- 0;
for(i in 1:steps){
if (N[i]>0) {
eventTime <- rexp(1,(b+d)*N[i])
t[i+1] <- t[i] + evenTime
if (runif(1) < (b/(b+d))) {
N[i+1] <- N[i] + 1
} else {
N[i+1] <- N[i] - 1
}
}
else {
N[i+1] <- 0
t[i+1] <- t[i]
}
}
plot(N~t,type='l')
return(N[steps+1])
}
StochasticSim <- function(steps,b,d,N0){
N <- numeric(steps + 1);
t <- numeric(steps + 1);
N[1] <- N0;
t[1] <- 0;
for(i in 1:steps){
if (N[i]>0) {
eventTime <- rexp(1,(b+d)*N[i])
t[i+1] <- t[i] + evenTime
if (runif(1) < (b/(b+d))) {
N[i+1] <- N[i] + 1
} else {
N[i+1] <- N[i] - 1
}
}
else {
N[i+1] <- 0
t[i+1] <- t[i]
}
}
plot(N~t,type='l')
return(N[steps+1])
}
StochasticSim(1000,.55,.5,10)
StochasticSim <- function(steps,b,d,N0){
N <- numeric(steps + 1);
t <- numeric(steps + 1);
N[1] <- N0;
t[1] <- 0;
for(i in 1:steps){
if (N[i]>0) {
eventTime <- rexp(1,(b+d)*N[i])
t[i+1] <- t[i] + eventTime
if (runif(1) < (b/(b+d))) {
N[i+1] <- N[i] + 1
} else {
N[i+1] <- N[i] - 1
}
}
else {
N[i+1] <- 0
t[i+1] <- t[i]
}
}
plot(N~t,type='l')
return(N[steps+1])
}
StochasticSim(1000,.55,.5,10)
StochasticSim(steps = 50,b=.55,d=.5, N0=10)
StochasticSim(steps = 50,b=.55,d=.5, N0=50)
?ldply
library(plyr)
?ldply
fuckit <- ldply(list(steps = 50,d=.5, N0=50,b = c(.3,.4,.5,.6,.7,.8)), .fun = StochasticSim())
fuckit <- ldply(list(steps = 50,d=.5, N0=50,b = c(.3,.4,.5,.6,.7,.8)), .fun = StochasticSim())
fuckit <- ldply(steps = 50,d=.5, N0=50,b = c(.3,.4,.5,.6,.7,.8), .fun = StochasticSim())
fuckit <- ldply(b = c(.3,.4,.5,.6,.7,.8), .fun = StochasticSim(steps = 50, d = .5, N0=50, b))
fuckit <- ldply(.data = c(.3,.4,.5,.6,.7,.8), .fun = StochasticSim(steps = 50, d = .5, N0=50, b))
StochasticSim <- function(steps,b,d,N0){
N <- numeric(steps + 1);
t <- numeric(steps + 1);
N[1] <- N0;
t[1] <- 0;
for(i in 1:steps){
if (N[i]>0) {
eventTime <- rexp(1,(b+d)*N[i])
t[i+1] <- t[i] + eventTime
if (runif(1) < (b/(b+d))) {
N[i+1] <- N[i] + 1
} else {
N[i+1] <- N[i] - 1
}
}
else {
N[i+1] <- 0
t[i+1] <- t[i]
}
}
#plot(N~t,type='l')
return(N[steps+1])
}
vector()
?vector()
vector(length = 50)
sim10runs <- vector(mode = 'numeric',length = 50)
sim10runs
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
sim10runs
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
sim10runs
propextinction10 <- length(which(sim10runs = 0))/length(sim10runs)
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
sim10runs
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
print(list(sim10runs, propextinction10))
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
print(list(sim10runs, paste('Extinction rate is: 'propextinction10)))
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
paste('Extinction rate is: ',propextinction10)
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
paste('Extinction rate is:',propextinction10)
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
paste('Extinction rate is:',propextinction10)
paste('Results of simulations are:',sim10runs)
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
paste('Extinction rate is:',propextinction10)
sim10runs
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
paste('Extinction rate is:',propextinction10)
kable(sim10runs)
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
paste('Extinction rate is:',propextinction10)
library(knitr)
kable(sim10runs)
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
paste('Extinction rate is:',propextinction10)
sim10runs
sim50runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim50runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=50)
}
propextinction50 <- length(which(sim50runs == 0))/length(sim50runs)
paste('Extinction rate is:',propextinction50)
sim50runs
sim50runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim50runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=50)
}
propextinction50 <- length(which(sim50runs == 0))/length(sim50runs)
paste('Extinction rate is:',propextinction50)
sim50runs
sim50runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim50runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=50)
}
propextinction50 <- length(which(sim50runs == 0))/length(sim50runs)
paste('Extinction rate is:',propextinction50)
sim50runs
sim50runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim50runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=50)
}
propextinction50 <- length(which(sim50runs == 0))/length(sim50runs)
paste('Extinction rate is:',propextinction50)
sim50runs
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
paste('Extinction rate is:',propextinction10)
paste('Final Population Size after each simulation is:'print(sim10runs))
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
paste('Extinction rate is:',propextinction10)
paste('Final Population Size after each simulation is:',print(sim10runs))
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
paste('Extinction rate is:',propextinction10)
paste('Final Population Size after each simulation is:',as.string(sim10runs))
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
paste('Extinction rate is:',propextinction10)
paste('Final Population Size after each simulation is:',as.character(sim10runs))
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
paste('Extinction rate is:',propextinction10)
paste('Final Population Size after each simulation is:',sim10runs, collapse = '')
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
paste('Extinction rate is:',propextinction10)
paste(sim10runs, collapse = '')
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
paste('Extinction rate is:',propextinction10)
paste(sim10runs)
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
paste('Extinction rate is:',propextinction10)
paste('Simulation results are:',paste(sim10runs))
sim10runs <- vector(mode = 'numeric',length = 50)
for(i in 1:50){
sim10runs[i] <- StochasticSim(steps = 50,b=.55,d=.5, N0=10)
}
propextinction10 <- length(which(sim10runs == 0))/length(sim10runs)
paste('Extinction rate is:',propextinction10)
paste(sim10runs)
age <- 0:4
sx <- c(740,280,105,32,0)
bx <- c(0,0.4,1.3,3,8,NA)
lx <- sx/740
print(lx)
age <- 0:4
sx <- c(740,280,105,32,0)
bx <- c(0,0.4,1.3,3,8,NA)
lx <- sx/740
print(lx)
as.vector(px) <- for(i in 1:length(lx)){
px <- lx[i+1]/lx[i]
}
px <- for(i in 1:length(lx)){
px <- lx[i+1]/lx[i]
}
px
px <- vector(mode="numeric", length=4)
px <- for(i in 1:length(lx)){
px <- lx[i+1]/lx[i]
}
px
px <- vector(mode="numeric", length=4)
for(i in 1:length(lx)){
px <- lx[i+1]/lx[i]
}
px
age <- 0:4
sx <- c(740,280,105,32,0)
bx <- c(0,0.4,1.3,3,8,NA)
lx <- sx/740
print(lx)
px <- vector(mode="numeric", length=4)
for(i in 1:length(lx)){
px <- lx[i+1]/lx[i]
}
age <- 0:4
sx <- c(740,280,105,32,0)
bx <- c(0,0.4,1.3,3,8,NA)
lx <- sx/740
lx
px <- vector(mode="numeric", length=4)
for(i in 1:length(lx)){
px <- lx[i+1]/lx[i]
}
px
lx[2]
[3]
lx[3]
lx[4]
lx[5]
px <- vector(mode="numeric", length=4)
for(i in 1:3){
px <- lx[i+1]/lx[i]
}
px
px <- vector(mode="numeric", length=4)
px
for(i in 1:3){
px <- lx[i+1]/lx[i]
}
px
class(px)
length(px)
px <- vector()
for(i in 1:3){
px <- lx[i+1]/lx[i]
}
px
lx
px <- vector()
px <- for(i in 1:length(lx)){
px[i] <- lx[i+1]/lx[i]
}
px
px <- vector(length = 5)
px <- for(i in 1:length(lx)){
px[i] <- lx[i+1]/lx[i]
}
px
px <- for(i in 1:length(lx)){
px[i] <- (lx[i+1]/lx[i])
}
px
px <- vector(mode = 'numeric',length = 5)
px <- for(i in 1:length(lx)){
px[i] <- (lx[i+1]/lx[i])
}
px
px <- vector(mode = 'numeric',length = 5)
for(i in 1:length(lx)){
px[i] <- (lx[i+1]/lx[i])
}
px
lifetable <- cbind(age,sx,lx,px,bx)
age <- 0:4
sx <- c(740,280,105,32,0)
bx <- c(0,0.4,1.3,3,8,NA)
lx <- sx/740
lx
px <- vector(mode = 'numeric',length = 5)
for(i in 1:length(lx)){
px[i] <- (lx[i+1]/lx[i])
}
px
lifetable <- cbind(age,sx,lx,px,bx)
length(age)
length(age)
length(sx)
length(bx)
bx <- c(0,0.4,1.3,3.8,NA)
lx <- sx/740
lifetable <- cbind(age,sx,lx,px,bx)
kable(lifetable)
?cbind
colnames(lifetable) <- c('Age','S_x','l_x','p_x','b_x')
kable(lifetable)
with(lifetable, sum(lx*bx))
with(lifetable, sum(lx*bx, na.rm = true))
with(lifetable, sum(l_x*b_x, na.rm = true))
lifetabe$l_x*lifetable*b_x
lifetable$l_x*lifetable*b_x
lifetable$l_x
lifetable <- cbind(age,sx,lx,px,bx)
colnames(lifetable) <- c('Age','S_x','l_x','p_x','b_x')
lifetable$l_x
lifetable$l_x
class(lifetable)
lifetable<- as.data.frame(lifetable)
lifetable$l_x
lifetable$l_x*lifetable$b_x
sum(lifetable$l_x*lifetable$b_x, na.rm= TRUE)
r0 <- sum(lifetable$l_x*lifetable$b_x, na.rm= TRUE)
r0
with(lifetable, sum(x*l_x*b_x, na.rm))
with(lifetable, sum(age*l_x*b_x, na.rm))
with(lifetable, sum(age*l_x*b_x, na.rm = TRUE))
(with(lifetable, sum(age*l_x*b_x, na.rm = TRUE))/r0)
